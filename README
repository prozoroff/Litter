Servlets
-- User --
GET
No arguments - shows user page if logged in.
/json - shows your details in json format if you are logged in.
/[username]  - shows a specific user page.
/[username]/json shows a specific users details in json format.
POST
No arguments - adds the user in the session to the database. (if no user is in the session it forwards to the registration page)
PUT
Updates user details
DELETE
Deletes the user

-- Login --
GET
No arguments - check sign on result from Google or Yahoo
/Google or /Yahoo - redirect to Google or Yahoo sign on page:

-- Logout --
GET
Invalidates the session with the effect of logging out the user.

-- RenderJson --
GET
No arguments - If an object is passed in by the request attribute "Data" it will be outputted as Json. (Written by Andy Cobley)

-- Follow --
GET
/json return followers formatted as Json for logged in user
/[username]/json - return followers formatted as Json for specified user
POST
/[username] - adds the user specified to those who the logged in user follows

DELETE
/[username] - removes the spicified user from those who the logged in user follows

-- Follows --
GET
/json - return those who the user follows formatted as Json for logged in user
/[username]/json - return those who the user follows formatted as Json

--Like--
GET
/[TweetID] - check if the logged in  user likes the specified tweet (DEPRECIATED, now loaded in before sending to user!)
POST
/[tweetID] - "likes" the tweet for the user currently logged in
DELETE
/[tweetID] - "Unlikes" the tweet  for the user currently logged in

--Tweet--

GET
/json returns tweets formatted as json for logged in user
/[username]/json returns tweets formatted as json for specified user
POST
adds a tweet for the logged in user
DELETE
/[tweetID] - remove the tweet

-- Mentions --
GET
/json - Gets mentions of logged in user in json
/[username/json - gets mentions of specified user in json

--Feed-- (must be logged in)
GET
no parameters - redirects to homepage to show tweets
/json returns the logged in users feed as json

--ADMIN-- (Must be specified admin user for all actions)
GET
/Host - gets the IP of the cassandra node used to connect
/Cluster gets the cluster name
/Port gets the port the cassandra node used to connect uses
/Test - test the connection to cassandra
/Pool - gets all nodes in the pool
/Down - gets all downed nodes

/POST
/Host  - set the host ip used to connect
/Cluster - set the cluster name used to connect
/Port - set the port used to connect